{
	"name": "dataflow_bronze_to_silver",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_dl_bronze_item_order",
						"type": "DatasetReference"
					},
					"name": "itemorder"
				},
				{
					"name": "source1"
				},
				{
					"name": "source2"
				},
				{
					"name": "source3"
				},
				{
					"name": "source4"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Parquet1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PO as string,",
				"          Vendor as string,",
				"          Apple as string,",
				"          Mango as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> itemorder",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> source1",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> source2",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> source3",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false) ~> source4",
				"itemorder cast(output(",
				"          PO as integer,",
				"          Apple as integer,",
				"          Mango as integer",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 derive(Ingested_Date = currentDate(),",
				"          Ingested_Timestamp = currentTimestamp(),",
				"          Ingested_By = 'Mohit') ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          Purchase_Order = PO,",
				"          Vendor,",
				"          Apple,",
				"          Mango,",
				"          Ingested_Date,",
				"          Ingested_Timestamp,",
				"          Ingested_By",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 split(ERROR_FUNCTION(''),",
				"     disjoint: false) ~> split1@(, )",
				"split1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}