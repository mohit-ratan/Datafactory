{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_blob_input_employee",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_department",
						"type": "DatasetReference"
					},
					"name": "source2"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_json_drivers",
						"type": "DatasetReference"
					},
					"name": "source3"
				},
				{
					"dataset": {
						"referenceName": "ds_input_races_csv",
						"type": "DatasetReference"
					},
					"name": "source4"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_circuit",
						"type": "DatasetReference"
					},
					"name": "source5"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_blob_input_csv",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_csv2",
						"type": "DatasetReference"
					},
					"name": "sink2"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_department",
						"type": "DatasetReference"
					},
					"name": "sink3"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_csv2",
						"type": "DatasetReference"
					},
					"name": "sink4"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_csv3",
						"type": "DatasetReference"
					},
					"name": "sink5"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_json",
						"type": "DatasetReference"
					},
					"name": "sink6"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_department",
						"type": "DatasetReference"
					},
					"name": "sink7"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_parquet",
						"type": "DatasetReference"
					},
					"name": "sink8"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_department",
						"type": "DatasetReference"
					},
					"name": "sink9"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_employee",
						"type": "DatasetReference"
					},
					"name": "sink10"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_department",
						"type": "DatasetReference"
					},
					"name": "sink11"
				}
			],
			"transformations": [
				{
					"name": "rank1"
				},
				{
					"name": "window1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "assert1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "parse1"
				},
				{
					"name": "stringify1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "pivot1"
				},
				{
					"name": "unpivot1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPLOYEE_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as string,",
				"          JOB_ID as string,",
				"          SALARY as integer,",
				"          MANAGER_ID as string,",
				"          DEPARTMENT_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          DEPARTMENT_ID as string,",
				"          DEPARTMENT_NAME as string,",
				"          MANAGER_ID as string,",
				"          LOCATION_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          skills as string,",
				"          address as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'singleDocument') ~> source3",
				"source(output(",
				"          id as string,",
				"          name as string,",
				"          gender as string,",
				"          dept as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source4",
				"source(output(",
				"          PO as string,",
				"          Vendor as string,",
				"          Apple as string,",
				"          Mango as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source5",
				"source1 rank(desc(SALARY, true),",
				"     output(rank as long)) ~> rank1",
				"source1 window(over(DEPARTMENT_ID),",
				"     desc(SALARY, false),",
				"     rank = rank(),",
				"          denseRank = denseRank(),",
				"          rowNumber = rowNumber()) ~> window1",
				"source1 keyGenerate(output(PrimaryKeyID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"source1, source2 lookup(source1@DEPARTMENT_ID == source2@DEPARTMENT_ID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"source2, source1 lookup(source2@DEPARTMENT_ID == source1@DEPARTMENT_ID,",
				"     multiple: false,",
				"     pickup: 'last',",
				"     desc(SALARY, false),",
				"     broadcast: 'auto')~> lookup2",
				"source1 cast(output(",
				"          HIRE_DATE as date 'MM/dd/yyyy'",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 derive(ErrorCheck = isError()) ~> derivedColumn1",
				"source1, source2 assert(expectExists(source1@DEPARTMENT_ID == source2@DEPARTMENT_ID, false, 'DateTrue'),",
				"     expectUnique(EMPLOYEE_ID, false, 'Duplicates'),",
				"     expectTrue(!isNull(toDate(HIRE_DATE, 'MM/dd/yyyy')), false, 'assert3'),",
				"     expectExists(EMPLOYEE_ID == EMPLOYEE_ID, false, 'Truecheck')) ~> assert1",
				"assert1 filter(isError()) ~> filter1",
				"source3 parse(skillsUpdated = skills ? (skill1 as string,",
				"          skill2 as string,",
				"          skill3 as string),",
				"     format: 'delimited',",
				"     columnNamesAsHeader: false,",
				"     columnDelimiter: ',',",
				"     nullValue: '') ~> parse1",
				"parse1 stringify(skillsUpdated = skillsUpdated ? string,",
				"     format: 'delimited',",
				"     columnNamesAsHeader: false,",
				"     columnDelimiter: ',',",
				"     nullValue: '') ~> stringify1",
				"source4 aggregate(groupBy(dept,",
				"          gender),",
				"     count = count()) ~> aggregate1",
				"source4 pivot(groupBy(dept),",
				"     pivotBy(gender),",
				"     {} = count(),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivot1",
				"source5 unpivot(output(",
				"          Fruits as string,",
				"          TotalFruits as string",
				"     ),",
				"     ungroupBy(PO,",
				"          Vendor),",
				"     lateral: true,",
				"     ignoreNullPivots: false) ~> unpivot1",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PO as string,",
				"          Vendor as string,",
				"          Apple as string,",
				"          Mango as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PO as string,",
				"          Vendor as string,",
				"          Apple as string,",
				"          Mango as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2",
				"lookup1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DEPARTMENT_ID as string,",
				"          DEPARTMENT_NAME as string,",
				"          MANAGER_ID as string,",
				"          LOCATION_ID as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink3",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PO as string,",
				"          Vendor as string,",
				"          Apple as string,",
				"          Mango as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink4",
				"window1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          PO as string,",
				"          Vendor as string,",
				"          Apple as string,",
				"          Mango as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink5",
				"rank1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          CUSTOMER_ID as string,",
				"          FULL_NAME as string,",
				"          EMAIL_ADDRESS as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink6",
				"lookup2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DEPARTMENT_ID as string,",
				"          DEPARTMENT_NAME as string,",
				"          MANAGER_ID as string,",
				"          LOCATION_ID as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink7",
				"stringify1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ORDER_ID as string,",
				"          ORDER_DATETIME as string,",
				"          CUSTOMER_ID as string,",
				"          ORDER_STATUS as string,",
				"          STORE_ID as string",
				"     ),",
				"     format: 'parquet',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink8",
				"pivot1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DEPARTMENT_ID as string,",
				"          DEPARTMENT_NAME as string,",
				"          MANAGER_ID as string,",
				"          LOCATION_ID as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink9",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EMPLOYEE_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as string,",
				"          JOB_ID as string,",
				"          SALARY as string,",
				"          MANAGER_ID as string,",
				"          DEPARTMENT_ID as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink10",
				"unpivot1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          DEPARTMENT_ID as string,",
				"          DEPARTMENT_NAME as string,",
				"          MANAGER_ID as string,",
				"          LOCATION_ID as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink11"
			]
		}
	}
}