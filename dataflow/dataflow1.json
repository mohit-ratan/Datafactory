{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_blob_input_employee",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_department",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "rank1"
				},
				{
					"name": "window1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "cast1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "assert1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPLOYEE_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as string,",
				"          JOB_ID as string,",
				"          SALARY as string,",
				"          MANAGER_ID as string,",
				"          DEPARTMENT_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          DEPARTMENT_ID as string,",
				"          DEPARTMENT_NAME as string,",
				"          MANAGER_ID as string,",
				"          LOCATION_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1 rank(desc(SALARY, true),",
				"     output(rank as long),",
				"     dense: true) ~> rank1",
				"source1 window(over(DEPARTMENT_ID),",
				"     desc(SALARY, false),",
				"     rank = rank(),",
				"          denseRank = denseRank(),",
				"          rowNumber = rowNumber()) ~> window1",
				"source1 keyGenerate(output(PrimaryKeyID as long),",
				"     startAt: 100L,",
				"     stepValue: 2L) ~> surrogateKey1",
				"source1 lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"source2, source1 lookup(source2@DEPARTMENT_ID == source1@DEPARTMENT_ID,",
				"     multiple: false,",
				"     pickup: 'last',",
				"     desc(SALARY, false),",
				"     broadcast: 'auto')~> lookup2",
				"source1 cast(output(",
				"          HIRE_DATE as date 'MM/dd/yyyy'",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 derive(ErrorCheck = isError()) ~> derivedColumn1",
				"source1, source2 assert(expectExists(source1@DEPARTMENT_ID == source2@DEPARTMENT_ID, false, 'DateTrue'),",
				"     expectUnique(EMPLOYEE_ID, false, 'Duplicates'),",
				"     expectTrue(!isNull(toDate(HIRE_DATE, 'MM/dd/yyyy')), false, 'assert3')) ~> assert1",
				"assert1 filter(isError()) ~> filter1"
			]
		}
	}
}