{
	"name": "dataflow1130",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_blob_input_employee",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "ds_blob_input_department",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "lookup2"
				},
				{
					"name": "assert1"
				},
				{
					"name": "filter1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPLOYEE_ID as integer,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as string,",
				"          JOB_ID as string,",
				"          SALARY as integer,",
				"          MANAGER_ID as integer,",
				"          DEPARTMENT_ID as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          DEPARTMENT_ID as integer,",
				"          DEPARTMENT_NAME as string,",
				"          MANAGER_ID as string,",
				"          LOCATION_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1 split(greater(toInteger(SALARY),20000),",
				"     greater(toInteger(DEPARTMENT_ID), 60),",
				"     disjoint: true) ~> split1@(Salarygreaterthan20000, Departmentgreaterthan60, Salarylessthan20000)",
				"source1 lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"source1 aggregate(groupBy(DEPARTMENT_ID),",
				"     TotalSalary = sum(SALARY)) ~> aggregate1",
				"source1 keyGenerate(output(PrimaryKeyID as long),",
				"     startAt: 100L,",
				"     stepValue: 5L) ~> surrogateKey1",
				"source2, source1 lookup(toInteger(source2@DEPARTMENT_ID) == source1@DEPARTMENT_ID,",
				"     multiple: false,",
				"     pickup: 'last',",
				"     desc(SALARY, false),",
				"     broadcast: 'auto')~> lookup2",
				"source1, source2 assert(expectTrue(!isNull(toDate(HIRE_DATE,'MM/dd/yyyy')), false, 'assert1'),",
				"     expectUnique(EMPLOYEE_ID, false, 'assert2'),",
				"     expectExists(source1@DEPARTMENT_ID == source2@DEPARTMENT_ID, false, 'assert3')) ~> assert1",
				"assert1 filter(hasError('assert1')) ~> filter1"
			]
		}
	}
}